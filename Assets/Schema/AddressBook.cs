// automatically generated by the FlatBuffers compiler, do not modify

namespace FlatBuffers_Profile
{

using System;
using FlatBuffers;

public enum PhoneType : sbyte
{
 MOBILE = 0,
 HOME = 1,
 WORK = 2,
};

public sealed class PhoneNumber : Table {
  public static PhoneNumber GetRootAsPhoneNumber(ByteBuffer _bb) { return GetRootAsPhoneNumber(_bb, new PhoneNumber()); }
  public static PhoneNumber GetRootAsPhoneNumber(ByteBuffer _bb, PhoneNumber obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PhoneNumber __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Number { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNumberBytes() { return __vector_as_arraysegment(4); }
  public PhoneType Type { get { int o = __offset(6); return o != 0 ? (PhoneType)bb.GetSbyte(o + bb_pos) : PhoneType.MOBILE; } }

  public static Offset<PhoneNumber> CreatePhoneNumber(FlatBufferBuilder builder,
      StringOffset numberOffset = default(StringOffset),
      PhoneType type = PhoneType.MOBILE) {
    builder.StartObject(2);
    PhoneNumber.AddNumber(builder, numberOffset);
    PhoneNumber.AddType(builder, type);
    return PhoneNumber.EndPhoneNumber(builder);
  }

  public static void StartPhoneNumber(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNumber(FlatBufferBuilder builder, StringOffset numberOffset) { builder.AddOffset(0, numberOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, PhoneType type) { builder.AddSbyte(1, (sbyte)type, 0); }
  public static Offset<PhoneNumber> EndPhoneNumber(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PhoneNumber>(o);
  }
};

public sealed class Person : Table {
  public static Person GetRootAsPerson(ByteBuffer _bb) { return GetRootAsPerson(_bb, new Person()); }
  public static Person GetRootAsPerson(ByteBuffer _bb, Person obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Person __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public string Name { get { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __vector_as_arraysegment(4); }
  public int Id { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public string Email { get { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; } }
  public ArraySegment<byte>? GetEmailBytes() { return __vector_as_arraysegment(8); }
  public PhoneNumber GetPhones(int j) { return GetPhones(new PhoneNumber(), j); }
  public PhoneNumber GetPhones(PhoneNumber obj, int j) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int PhonesLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<Person> CreatePerson(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int id = 0,
      StringOffset emailOffset = default(StringOffset),
      VectorOffset phonesOffset = default(VectorOffset)) {
    builder.StartObject(4);
    Person.AddPhones(builder, phonesOffset);
    Person.AddEmail(builder, emailOffset);
    Person.AddId(builder, id);
    Person.AddName(builder, nameOffset);
    return Person.EndPerson(builder);
  }

  public static void StartPerson(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static void AddEmail(FlatBufferBuilder builder, StringOffset emailOffset) { builder.AddOffset(2, emailOffset.Value, 0); }
  public static void AddPhones(FlatBufferBuilder builder, VectorOffset phonesOffset) { builder.AddOffset(3, phonesOffset.Value, 0); }
  public static VectorOffset CreatePhonesVector(FlatBufferBuilder builder, Offset<PhoneNumber>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPhonesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Person> EndPerson(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Person>(o);
  }
};

public sealed class AddressBook : Table {
  public static AddressBook GetRootAsAddressBook(ByteBuffer _bb) { return GetRootAsAddressBook(_bb, new AddressBook()); }
  public static AddressBook GetRootAsAddressBook(ByteBuffer _bb, AddressBook obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public AddressBook __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Person GetPeople(int j) { return GetPeople(new Person(), j); }
  public Person GetPeople(Person obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int PeopleLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<AddressBook> CreateAddressBook(FlatBufferBuilder builder,
      VectorOffset peopleOffset = default(VectorOffset)) {
    builder.StartObject(1);
    AddressBook.AddPeople(builder, peopleOffset);
    return AddressBook.EndAddressBook(builder);
  }

  public static void StartAddressBook(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddPeople(FlatBufferBuilder builder, VectorOffset peopleOffset) { builder.AddOffset(0, peopleOffset.Value, 0); }
  public static VectorOffset CreatePeopleVector(FlatBufferBuilder builder, Offset<Person>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartPeopleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<AddressBook> EndAddressBook(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AddressBook>(o);
  }
  public static void FinishAddressBookBuffer(FlatBufferBuilder builder, Offset<AddressBook> offset) { builder.Finish(offset.Value); }
};


}
